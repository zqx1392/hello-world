EZ/Brainless
・クラスのメンバ変数はm_*にしてください。
　→メンバ変数か通常の変数か区別しやすいためです。
：了解です。修正します。

・ソリューションに使用しているライブラリのプロジェクトを追加してください。
：了解です。

・関数毎にintを返しエラーの種類を判断していますが、
  boolで判断したほうが、プログラムとしてシンプルになりますので修正をお願いします。
  例：
　　mannou::RCode::R_SUCCESS_WITH_ERROR < findPPPostalCode(PPFeatureClassName, PPFeatureClass, PPFIELD, inputReader, &PPCoordinates)
　　と記載されていますが、
　　上記の場合、関数がR_SUCCESS_WITH_ERRORを返した場合は、エラーメッセージが出力されないことが良いのかどうか判断できない。

・inputReaderクラスが色々なクラスを持っていて、プログラムがちょっと分かりづらくなっています。
　例：
　　inputReader->_IOCtrl->print_error(mannou::ECode::E_FAILED_TO_GET_DATA, _T("Postal code coordinates list"));
　　と記載されていますが、
　　読み込みクラスなのに、アウトプットを行っていて、分かりづらくなっています。
　クラスは最低でも、
　引数を読み込むクラス・ログを出力するクラス・メインの処理を行うクラス
　に分けてもらえますでしょうか？
　サンプルプログラムを送るので参考にしてみて下さい。
　→_tmain()があるcppファイルにはあまり、処理を書かないほうが見やすいです。


・mannouクラスという名前のクラスがありますが、名前から何をするクラスか分からないので
　名前を変えてもらえますでしょうか？
　→関数名もやっていることと名前があうようにしてください。
　　例 getPOIActualAddress
       POIのActualAddressを取得すると書いてあるのに、最初にPostalPointを取ってきて、
　　　 関数内で形状の修正までしています。

・getPOIActualAddress関数の中身が少し長すぎるため、見づらくなっています。
　処理を整理して、関数を分けてみてください。

・PostalPointのデータを処理の最初に全て読み込んでいますが、メモリは足りるのでしょうか？
　→今は大丈夫でも将来的に厳しいのではないでしょうか？

・ツールの戻り値はTDCにあわせて
　0:正常終了
　1:異常終了
  2:例外があった場合の異常終了
　にしてくれるとうれしいです。

・フィールド名の指定は、直接文字列で記載するのではなく、提供したライブラリ(libsindy_schema)を
　使用してください。

・initFile関数のCString fileTypeはenum型にしたほうが良いです。
　→文字列型だとタイプミスをしやすいため

・RONLYで接続していますが、RONLYでは編集ができないのでは。。。
・サーバ接続情報を分解している意味はなんでしょうか？
　→RONLYで接続するためであれば、今回は必要ないはずですし、
　　仮にRONLYで接続する場合も、分解して無理やり接続情報を作り直すのではなく
　　サーバ接続情報とオーナを引き数で指定できるようにしましょう。
・
・tableList["inputPP"]のようにオプションの値を、文字列で入力していますが、
　あまりよくありません。
　オプションの値が変わった場合に、色々な場所を変えなくては行けなくなります。
　→本来であればconstの変数を定義するべきです。
　　サンプルコードを参考にしてみてください。


