【全体】
各種クラスの関数において、どの関数がpublic関数(外部からアクセスできるもの)
か分かるようにして頂けますでしょうか？

【AccessSV】
以下2つのどちらかの対応をお願い致します。
1. AccessSVは関数群だけ用意して、メンバ変数にworkspaceやfeatureclassを持たないようにする。
2. メンバ変数へworkspace, featureclass, tableは持たせる場合は、外部からアクセスできないようにする。
　 その代わり、カーソル取得関数を追加して、検索は外部からできるようにする。
　 現状だとworkspace等をmapにいれていますが、それぞれ一つずつの変数に入れる。
　 →汎用ツール等で、インプットのDBやレイヤ数に変更がある場合は、mapに入れて管理するやり方は
　　 有効ですが、今回は、インプット・アウトプットのDB、接続するレイヤ・テーブルは明確なので、
　　 それぞれで変数化したほうが、他の人に取っては見やすいコードとなります。

【IOManager】
  ・ちょっと変数・関数が多いですね。
　　以前サンプルとしてお送りしたUpdateRoadNameListのLog.h, Log.cppを参考にして、
　　必要最低限の関数、メンバ変数を持つようにして下さい。

【DataManager】
・SiNDYへのアクセス時、メインクラス → DataManager → AcessSVの順でアクセスしており、
　DBやテーブルを接続するだけの処理なのに、クラス構造が複雑になっています。
　DataManagerを削除して、クラス図を再度構成してもらえますでしょうか？
　→説明資料ではファイルとArcGIS系のものを扱うクラスとなっていますが、
　　今回のケースだとArcGISしか扱わないですよね?
    ここでArcGISから取得したデータを加工するのであれば、意味のあるクラスになるのですが、
　　今回のツールだとデータを横流ししているだけなので、あまり有効なクラスとなっていなく、
　　ほかの人が見たとき、少し分かりづくなってしまいます。

> コーディングしてからPoiInfoToHNPUpdaterクラス図を書いたほうがいいと思い
> ます。
> よく考えてクラス図を書いても、もし濡れ点があればクラス図を修正する必要で、
> 逆に時間掛かります。
> 今回の処理フローに従えれば大部分のコーディングは大丈夫だと思います。
> そのため、そうさせていただきます。
上記についてですが、コーディング後のレビューでの後戻りをできるだけ無くすために
クラス図を描いてもらっています。
もちろん漏れがあれば、クラス図の修正が必要となり時間がかかってしまうのですが、
そいった漏れをコーディング前に無くすのも目的の一つです。
→全て最初に設計したクラス図通りコーディングしなくてはダメということではないですが、
　クラス図をきちんと書くことで、致命的な漏れをなくして欲しいと考えています。
また、処理フローが問題無くてもクラス図自体が上手くできていないと、レビュー時に
コードを大幅に変えてもらうことになります。

要件定義やクラス図をきちんとレビューする運用は今回が初めてであり、
いきなり全てを完璧にやるのは難しいと思うので、今回のクラス図はこれで
良いですが、次回からはきちんとメインの処理についても記載するようにして下さい。
